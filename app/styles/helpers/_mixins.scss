// width, height
@mixin size($width: revert, $height: revert) {
  width: $width;
  height: $height;
}

// absoluteCenter
@mixin absoluteCenter($direction: "x") {
  position: absolute;
  @if ($direction == "x") {
    left: 50%;
    transform: translateX(-50%);
  }
  @if ($direction == "y") {
    top: 50%;
    transform: translateY(-50%);
  }
  @if ($direction == "both") {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// absolute full size
@mixin absoluteFull() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// flex box
@mixin flexBox(
  $align-items: stretch,
  $justify-content: flex-start,
  $direction: row,
  $flex: flex,
  $wrap: nowrap
) {
  display: $flex;
  align-items: $align-items;
  justify-content: $justify-content;
  flex-direction: $direction;
  flex-wrap: $wrap;
}

// hide scroll bar for DOM element
@mixin hideScroll() {
  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

// custom style scrollbar
@mixin styleScroll($width: revert, $color: revert, $radius: revert) {
  &::-webkit-scrollbar {
    width: $width;
  }

  &::-webkit-scrollbar-track {
    background: $gray-lighter-more-color;
    border-radius: $radius;
  }

  &::-webkit-scrollbar-thumb {
    background-color: $color;
    border-radius: $radius;
  }
}

// text clamp
@mixin textClamp($row: 1) {
  display: -webkit-box;
  -webkit-line-clamp: $row;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-word;
}

// hover effect
@mixin hoverEffect($itemClass, $contentClass, $transform: true) {
  #{$itemClass} {
    position: relative;
    z-index: 1;
    & > * {
      transition: transform 0.25s linear;
      will-change: transform;
    }
    #{$contentClass} {
      @include absoluteFull();
      @include flexBox(center, center, column);
      opacity: 0;
      visibility: hidden;
      transition: all 0.25s linear;
      background: linear-gradient(
        to bottom,
        rgba($primary-color, 0.8),
        rgba($secondary-color, 0.8)
      );
      z-index: 2;
    }
    @if $transform {
      &::after {
        @include absoluteFull();
        content: "";
        background: $third-color;
        z-index: -1;
      }
    }

    &:hover {
      #{$contentClass} {
        opacity: 1;
        visibility: visible;
      }

      @if $transform {
        & > * {
          transform: translate(-1rem, -1rem);
        }
      }
    }
  }
}

// touch slider
@mixin touchSlider($width: 85%, $gap: 2.5rem, $padding: 1rem) {
  display: grid;
  justify-content: flex-start;
  grid-template-columns: unset;
  grid-auto-flow: column;
  grid-auto-columns: $width;
  gap: 0 $gap;
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  scroll-snap-stop: always;
  padding: $padding;
  @include hideScroll;

  & > * {
    scroll-snap-align: start;
    width: auto !important;
  }
}

// flex box with object
@mixin flexBox2($config: ()) {
  $config: extend(
    (
      align-items: stretch,
      justify-content: flex-start,
      direction: row,
      display: flex,
      wrap: nowrap,
    ),
    $config
  );

  display: map-get($config, display);
  align-items: map-get($config, align-items);
  justify-content: map-get($config, justify-content);
  flex-direction: map-get($config, direction);
  flex-wrap: map-get($config, wrap);
}

/*#region media for desktop first*/
@mixin maxWidth($break-point) {
  @media screen and (max-width: $break-point) {
    @content;
  }
}

@mixin maxHeight($break-point) {
  @media screen and (max-height: $break-point) {
    @content;
  }
}
/*#endregion*/

/*#region media for mobile first */
@mixin minWidth($break-point) {
  @media screen and (min-width: $break-point) {
    @content;
  }
}

@mixin minHeight($break-point) {
  @media screen and (min-height: $break-point) {
    @content;
  }
}
/*#endregion*/
